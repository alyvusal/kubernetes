# https://kubernetes.io/docs/concepts/policy/resource-quotas/
# A ResourceQuota object applies to the namespace it s created in, like a LimitRange, 
# but it applies to all the pods  resource requests and limits in total and not to
# each individual pod or container separately

apiVersion: v1
kind: ResourceQuota
metadata:
  name: cpu-and-mem
spec:
  # This ResourceQuota sets the maximum amount of CPU pods in the namespace
  # can request to 400 millicores
  # sum of all limits in this namespace
  hard:
    requests.cpu: 400m
    requests.memory: 200Mi
    limits.cpu: 600m
    limits.memory: 500Mi
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storage
spec:
hard:
  # The amount of storage claimable overall
  requests.storage: 500Gi
  # The amount of claimable storage in StorageClass ssd
  ssd.storageclass.storage.k8s.io/requests.storage: 300Gi
  standard.storageclass.storage.k8s.io/requests.storage: 1Ti

# In this example, the amount of storage all PersistentVolumeClaims in a namespace
# can request is limited to 500 GiB (by the requests.storageentry in the ResourceQuota object). 
# But as you ll remember fromchapter 6, PersistentVolumeClaims can
# request a dynamically provisioned PersistentVolume of a specific StorageClass. That s
# why Kubernetes also makes it possible to define storage quotas for each StorageClass
# individually. The previous example limits the total amount of claimable SSD storage
# (designated by the ssdStorageClass) to 300 GiB. The less-performant HDD storage
# (StorageClass standard) is limited to 1 TiB.
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: objects
spec:
  hard:
  # Only 10 Pods, 5 ReplicationControllers, 10 Secrets, 10 ConfigMaps, and 
  # 4 PersistentVolumeClaims can be created in the namespace.
    pods: 10
    replicationcontrollers: 5
    secrets: 10
    configmaps: 10
    persistentvolumeclaims: 4
  # Five Services overall can be created, of which at most one can be a
  # LoadBalancer Service and at most two can be NodePort Services.
    services: 5
    services.loadbalancers: 1
    services.nodeports: 2
  # Only two PVCs can claim storage with the ssd StorageClass.
    ssd.storageclass.storage.k8s.io/persistentvolumeclaims: 2
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: besteffort-notterminating-pods
spec:
  scopes:
  # This quota only applies to pods that have the BestEffort QoS and 
  # don t have an active deadline set.
  - BestEffort
  - NotTerminating
  hard: 
  # Only four such pods can exist.
    pods: 4

# This quota ensures that at most four pods exist with the BestEffortQoS class,
# which don t have an active deadline. If the quota was targeting NotBestEffortpods
# instead, you could also specify requests.cpu, requests.memory, limits.cpu, and limits.memory.
